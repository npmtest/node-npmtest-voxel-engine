{"/home/travis/build/npmtest/node-npmtest-voxel-engine/test.js":"/* istanbul instrument in package npmtest_voxel_engine */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-voxel-engine/lib.npmtest_voxel_engine.js":"/* istanbul instrument in package npmtest_voxel_engine */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_voxel_engine = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_voxel_engine = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-voxel-engine/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-voxel-engine && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_voxel_engine */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_voxel_engine\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_voxel_engine.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_voxel_engine.rollup.js'] =\n            local.assetsDict['/assets.npmtest_voxel_engine.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_voxel_engine.__dirname + '/lib.npmtest_voxel_engine.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-voxel-engine/node_modules/voxel-engine/index.js":"var voxel = require('voxel')\nvar voxelMesh = require('voxel-mesh')\nvar ray = require('voxel-raycast')\nvar texture = require('voxel-texture')\nvar control = require('voxel-control')\nvar voxelView = require('voxel-view')\nvar THREE = require('three')\nvar Stats = require('./lib/stats')\nvar Detector = require('./lib/detector')\nvar inherits = require('inherits')\nvar path = require('path')\nvar EventEmitter = require('events').EventEmitter\nif (process.browser) var interact = require('interact')\nvar requestAnimationFrame = require('raf')\nvar collisions = require('collide-3d-tilemap')\nvar aabb = require('aabb-3d')\nvar glMatrix = require('gl-matrix')\nvar vector = glMatrix.vec3\nvar SpatialEventEmitter = require('spatial-events')\nvar regionChange = require('voxel-region-change')\nvar kb = require('kb-controls')\nvar physical = require('voxel-physical')\nvar pin = require('pin-it')\nvar tic = require('tic')()\n\nmodule.exports = Game\n\nfunction Game(opts) {\n  if (!(this instanceof Game)) return new Game(opts)\n  var self = this\n  if (!opts) opts = {}\n  if (process.browser && this.notCapable(opts)) return\n  \n  // is this a client or a headless server\n  this.isClient = Boolean( (typeof opts.isClient !== 'undefined') ? opts.isClient : process.browser )\n\n  if (!('generateChunks' in opts)) opts.generateChunks = true\n  this.generateChunks = opts.generateChunks\n  this.setConfigurablePositions(opts)\n  this.configureChunkLoading(opts)\n  this.setDimensions(opts)\n  this.THREE = THREE\n  this.vector = vector\n  this.glMatrix = glMatrix\n  this.arrayType = opts.arrayType || Uint8Array\n  this.cubeSize = 1 // backwards compat\n  this.chunkSize = opts.chunkSize || 32\n  \n  // chunkDistance and removeDistance should not be set to the same thing\n  // as it causes lag when you go back and forth on a chunk boundary\n  this.chunkDistance = opts.chunkDistance || 2\n  this.removeDistance = opts.removeDistance || this.chunkDistance + 1\n  \n  this.skyColor = opts.skyColor || 0xBFD1E5\n  this.antialias = opts.antialias\n  this.playerHeight = opts.playerHeight || 1.62\n  this.meshType = opts.meshType || 'surfaceMesh'\n  this.mesher = opts.mesher || voxel.meshers.culled\n  this.materialType = opts.materialType || THREE.MeshLambertMaterial\n  this.materialParams = opts.materialParams || {}\n  this.items = []\n  this.voxels = voxel(this)\n  this.scene = new THREE.Scene()\n  this.view = opts.view || new voxelView(THREE, {\n    width: this.width,\n    height: this.height,\n    skyColor: this.skyColor,\n    antialias: this.antialias\n  })\n  this.view.bindToScene(this.scene)\n  this.camera = this.view.getCamera()\n  if (!opts.lightsDisabled) this.addLights(this.scene)\n  \n  this.fogScale = opts.fogScale || 32\n  if (!opts.fogDisabled) this.scene.fog = new THREE.Fog( this.skyColor, 0.00025, this.worldWidth() * this.fogScale )\n  \n  this.collideVoxels = collisions(\n    this.getBlock.bind(this),\n    1,\n    [Infinity, Infinity, Infinity],\n    [-Infinity, -Infinity, -Infinity]\n  )\n  \n  this.timer = this.initializeTimer((opts.tickFPS || 16))\n  this.paused = false\n\n  this.spatial = new SpatialEventEmitter\n  this.region = regionChange(this.spatial, aabb([0, 0, 0], [1, 1, 1]), this.chunkSize)\n  this.voxelRegion = regionChange(this.spatial, 1)\n  this.chunkRegion = regionChange(this.spatial, this.chunkSize)\n  this.asyncChunkGeneration = false\n\n  // contains chunks that has had an update this tick. Will be generated right before redrawing the frame\n  this.chunksNeedsUpdate = {}\n  // contains new chunks yet to be generated. Handled by game.loadPendingChunks\n  this.pendingChunks = []\n\n  this.materials = texture({\n    game: this,\n    texturePath: opts.texturePath || './textures/',\n    materialType: opts.materialType || THREE.MeshLambertMaterial,\n    materialParams: opts.materialParams || {},\n    materialFlatColor: opts.materialFlatColor === true\n  })\n\n  this.materialNames = opts.materials || [['grass', 'dirt', 'grass_dirt'], 'brick', 'dirt']\n  \n  self.chunkRegion.on('change', function(newChunk) {\n    self.removeFarChunks()\n  })\n\n  if (this.isClient) this.materials.load(this.materialNames)\n\n  if (this.generateChunks) this.handleChunkGeneration()\n\n  // client side only after this point\n  if (!this.isClient) return\n  \n  this.paused = true\n  this.initializeRendering(opts)\n \n  this.showAllChunks()\n\n  setTimeout(function() {\n    self.asyncChunkGeneration = 'asyncChunkGeneration' in opts ? opts.asyncChunkGeneration : true\n  }, 2000)\n\n  this.initializeControls(opts)\n}\n\ninherits(Game, EventEmitter)\n\n// # External API\n\nGame.prototype.voxelPosition = function(gamePosition) {\n  var _ = Math.floor\n  var p = gamePosition\n  var v = []\n  v[0] = _(p[0])\n  v[1] = _(p[1])\n  v[2] = _(p[2])\n  return v\n}\n\nGame.prototype.cameraPosition = function() {\n  return this.view.cameraPosition()\n}\n\nGame.prototype.cameraVector = function() {\n  return this.view.cameraVector()\n}\n\nGame.prototype.makePhysical = function(target, envelope, blocksCreation) {\n  var vel = this.terminalVelocity\n  envelope = envelope || [2/3, 1.5, 2/3]\n  var obj = physical(target, this.potentialCollisionSet(), envelope, {x: vel[0], y: vel[1], z: vel[2]})\n  obj.blocksCreation = !!blocksCreation\n  return obj\n}\n\nGame.prototype.addItem = function(item) {\n  if (!item.tick) {\n    var newItem = physical(\n      item.mesh,\n      this.potentialCollisionSet(),\n      [item.size, item.size, item.size]\n    )\n    \n    if (item.velocity) {\n      newItem.velocity.copy(item.velocity)\n      newItem.subjectTo(this.gravity)\n    }\n    \n    newItem.repr = function() { return 'debris' }\n    newItem.mesh = item.mesh\n    newItem.blocksCreation = item.blocksCreation\n    \n    item = newItem\n  }\n  \n  this.items.push(item)\n  if (item.mesh) this.scene.add(item.mesh)\n  return this.items[this.items.length - 1]\n}\n\nGame.prototype.removeItem = function(item) {\n  var ix = this.items.indexOf(item)\n  if (ix < 0) return\n  this.items.splice(ix, 1)\n  if (item.mesh) this.scene.remove(item.mesh)\n}\n\n// only intersects voxels, not items (for now)\nGame.prototype.raycast = // backwards compat\nGame.prototype.raycastVoxels = function(start, direction, maxDistance, epilson) {\n  if (!start) return this.raycastVoxels(this.cameraPosition(), this.cameraVector(), 10)\n  \n  var hitNormal = [0, 0, 0]\n  var hitPosition = [0, 0, 0]\n  var cp = start || this.cameraPosition()\n  var cv = direction || this.cameraVector()\n  var hitBlock = ray(this, cp, cv, maxDistance || 10.0, hitPosition, hitNormal, epilson || this.epilson)\n  if (hitBlock <= 0) return false\n  var adjacentPosition = [0, 0, 0]\n  var voxelPosition = this.voxelPosition(hitPosition)\n  vector.add(adjacentPosition, voxelPosition, hitNormal)\n  \n  return {\n    position: hitPosition,\n    voxel: voxelPosition,\n    direction: direction,\n    value: hitBlock,\n    normal: hitNormal,\n    adjacent: adjacentPosition\n  }\n}\n\nGame.prototype.canCreateBlock = function(pos) {\n  pos = this.parseVectorArguments(arguments)\n  var floored = pos.map(function(i) { return Math.floor(i) })\n  var bbox = aabb(floored, [1, 1, 1])\n  \n  for (var i = 0, len = this.items.length; i < len; ++i) {\n    var item = this.items[i]\n    var itemInTheWay = item.blocksCreation && item.aabb && bbox.intersects(item.aabb())\n    if (itemInTheWay) return false\n  }\n\n  return true\n}\n\nGame.prototype.createBlock = function(pos, val) {\n  if (typeof val === 'string') val = this.materials.find(val)\n  if (!this.canCreateBlock(pos)) return false\n  this.setBlock(pos, val)\n  return true\n}\n\nGame.prototype.setBlock = function(pos, val) {\n  if (typeof val === 'string') val = this.materials.find(val)\n  var old = this.voxels.voxelAtPosition(pos, val)\n  var c = this.voxels.chunkAtPosition(pos)\n  var chunk = this.voxels.chunks[c.join('|')]\n  if (!chunk) return// todo - does self.emit('missingChunk', c.join('|')) make sense here?\n  this.addChunkToNextUpdate(chunk)\n  this.spatial.emit('change-block', pos, old, val)\n  this.emit('setBlock', pos, val, old)\n}\n\nGame.prototype.getBlock = function(pos) {\n  pos = this.parseVectorArguments(arguments)\n  return this.voxels.voxelAtPosition(pos)\n}\n\nGame.prototype.blockPosition = function(pos) {\n  pos = this.parseVectorArguments(arguments)\n  var ox = Math.floor(pos[0])\n  var oy = Math.floor(pos[1])\n  var oz = Math.floor(pos[2])\n  return [ox, oy, oz]\n}\n\nGame.prototype.blocks = function(low, high, iterator) {\n  var l = low, h = high\n  var d = [ h[0]-l[0], h[1]-l[1], h[2]-l[2] ]\n  if (!iterator) var voxels = new this.arrayType(d[0]*d[1]*d[2])\n  var i = 0\n  for(var z=l[2]; z<h[2]; ++z)\n  for(var y=l[1]; y<h[1]; ++y)\n  for(var x=l[0]; x<h[0]; ++x, ++i) {\n    if (iterator) iterator(x, y, z, i)\n    else voxels[i] = this.voxels.voxelAtPosition([x, y, z])\n  }\n  if (!iterator) return {voxels: voxels, dims: d}\n}\n\n// backwards compat\nGame.prototype.createAdjacent = function(hit, val) {\n  this.createBlock(hit.adjacent, val)\n}\n\nGame.prototype.appendTo = function (element) {\n  this.view.appendTo(element)\n}\n\n// # Defaults/options parsing\n\nGame.prototype.gravity = [0, -0.0000036, 0]\nGame.prototype.friction = 0.3\nGame.prototype.epilson = 1e-8\nGame.prototype.terminalVelocity = [0.9, 0.1, 0.9]\n\nGame.prototype.defaultButtons = {\n  'W': 'forward'\n, 'A': 'left'\n, 'S': 'backward'\n, 'D': 'right'\n, '<up>': 'forward'\n, '<left>': 'left'\n, '<down>': 'backward'\n, '<right>': 'right'\n, '<mouse 1>': 'fire'\n, '<mouse 3>': 'firealt'\n, '<space>': 'jump'\n, '<shift>': 'crouch'\n, '<control>': 'alt'\n}\n\n// used in methods that have identity function(pos) {}\nGame.prototype.parseVectorArguments = function(args) {\n  if (!args) return false\n  if (args[0] instanceof Array) return args[0]\n  return [args[0], args[1], args[2]]\n}\n\nGame.prototype.setConfigurablePositions = function(opts) {\n  var sp = opts.startingPosition\n  this.startingPosition = sp || [35, 1024, 35]\n  var wo = opts.worldOrigin\n  this.worldOrigin = wo || [0, 0, 0]\n}\n\nGame.prototype.setDimensions = function(opts) {\n  if (opts.container) this.container = opts.container\n  if (opts.container && opts.container.clientHeight) {\n    this.height = opts.container.clientHeight\n  } else {\n    this.height = typeof window === \"undefined\" ? 1 : window.innerHeight\n  }\n  if (opts.container && opts.container.clientWidth) {\n    this.width = opts.container.clientWidth\n  } else {\n    this.width = typeof window === \"undefined\" ? 1 : window.innerWidth\n  }\n}\n\nGame.prototype.notCapable = function(opts) {\n  var self = this\n  if( !Detector().webgl ) {\n    this.view = {\n      appendTo: function(el) {\n        el.appendChild(self.notCapableMessage())\n      }\n    }\n    return true\n  }\n  return false\n}\n\nGame.prototype.notCapableMessage = function() {\n  var wrapper = document.createElement('div')\n  wrapper.className = \"errorMessage\"\n  var a = document.createElement('a')\n  a.title = \"You need WebGL and Pointer Lock (Chrome 23/Firefox 14) to play this game. Click here for more information.\"\n  a.innerHTML = a.title\n  a.href = \"http://get.webgl.org\"\n  wrapper.appendChild(a)\n  return wrapper\n}\n\nGame.prototype.onWindowResize = function() {\n  var width = window.innerWidth\n  var height = window.innerHeight\n  if (this.container) {\n    width = this.container.clientWidth\n    height = this.container.clientHeight\n  }\n  this.view.resizeWindow(width, height)\n}\n\n// # Physics/collision related methods\n\nGame.prototype.control = function(target) {\n  this.controlling = target\n  return this.controls.target(target)\n}\n\nGame.prototype.potentialCollisionSet = function() {\n  return [{ collide: this.collideTerrain.bind(this) }]\n}\n\n/**\n * Get the position of the player under control.\n * If there is no player under control, return\n * current position of the game's camera.\n *\n * @return {Array} an [x, y, z] tuple\n */\n\nGame.prototype.playerPosition = function() {\n  var target = this.controls.target()\n  var position = target\n    ? target.avatar.position\n    : this.camera.localToWorld(this.camera.position.clone())\n  return [position.x, position.y, position.z]\n}\n\nGame.prototype.playerAABB = function(position) {\n  var pos = position || this.playerPosition()\n  var lower = []\n  var upper = [1/2, this.playerHeight, 1/2]\n  var playerBottom = [1/4, this.playerHeight, 1/4]\n  vector.subtract(lower, pos, playerBottom)\n  var bbox = aabb(lower, upper)\n  return bbox\n}\n\nGame.prototype.collideTerrain = function(other, bbox, vec, resting) {\n  var self = this\n  var axes = ['x', 'y', 'z']\n  var vec3 = [vec.x, vec.y, vec.z]\n  this.collideVoxels(bbox, vec3, function hit(axis, tile, coords, dir, edge) {\n    if (!tile) return\n    if (Math.abs(vec3[axis]) < Math.abs(edge)) return\n    vec3[axis] = vec[axes[axis]] = edge\n    other.acceleration[axes[axis]] = 0\n    resting[axes[axis]] = dir\n    other.friction[axes[(axis + 1) % 3]] = other.friction[axes[(axis + 2) % 3]] = axis === 1 ? self.friction  : 1\n    return true\n  })\n}\n\n// # Three.js specific methods\n\nGame.prototype.addStats = function() {\n  stats = new Stats()\n  stats.domElement.style.position  = 'absolute'\n  stats.domElement.style.bottom  = '0px'\n  document.body.appendChild( stats.domElement )\n}\n\nGame.prototype.addLights = function(scene) {\n  var ambientLight, directionalLight\n  ambientLight = new THREE.AmbientLight(0xcccccc)\n  scene.add(ambientLight)\n  var light\t= new THREE.DirectionalLight( 0xffffff , 1)\n  light.position.set( 1, 1, 0.5 ).normalize()\n  scene.add( light )\n}\n\n// # Chunk related methods\n\nGame.prototype.configureChunkLoading = function(opts) {\n  var self = this\n  if (!opts.generateChunks) return\n  if (!opts.generate) {\n    this.generate = function(x,y,z) {\n      return x*x+y*y+z*z <= 15*15 ? 1 : 0 // sphere world\n    }\n  } else {\n    this.generate = opts.generate\n  }\n  if (opts.generateVoxelChunk) {\n    this.generateVoxelChunk = opts.generateVoxelChunk\n  } else {\n    this.generateVoxelChunk = function(low, high) {\n      return voxel.generate(low, high, self.generate, self)\n    }\n  }\n}\n\nGame.prototype.worldWidth = function() {\n  return this.chunkSize * 2 * this.chunkDistance\n}\n\nGame.prototype.chunkToWorld = function(pos) {\n  return [\n    pos[0] * this.chunkSize,\n    pos[1] * this.chunkSize,\n    pos[2] * this.chunkSize\n  ]\n}\n\nGame.prototype.removeFarChunks = function(playerPosition) {\n  var self = this\n  playerPosition = playerPosition || this.playerPosition()\n  var nearbyChunks = this.voxels.nearbyChunks(playerPosition, this.removeDistance).map(function(chunkPos) {\n    return chunkPos.join('|')\n  })\n  Object.keys(self.voxels.chunks).map(function(chunkIndex) {\n    if (nearbyChunks.indexOf(chunkIndex) > -1) return\n    var chunk = self.voxels.chunks[chunkIndex]\n    var mesh = self.voxels.meshes[chunkIndex]\n    var pendingIndex = self.pendingChunks.indexOf(chunkIndex)\n    if (pendingIndex !== -1) self.pendingChunks.splice(pendingIndex, 1)\n    if (!chunk) return\n    var chunkPosition = chunk.position\n    if (mesh) {\n      if (mesh.surfaceMesh) {\n        self.scene.remove(mesh.surfaceMesh)\n        mesh.surfaceMesh.geometry.dispose()\n      }\n      if (mesh.wireMesh) {\n        mesh.wireMesh.geometry.dispose()\n        self.scene.remove(mesh.wireMesh)\n      }\n      delete mesh.data\n      delete mesh.geometry\n      delete mesh.meshed\n      delete mesh.surfaceMesh\n      delete mesh.wireMesh\n    }\n    delete self.voxels.chunks[chunkIndex]\n    self.emit('removeChunk', chunkPosition)\n  })\n  self.voxels.requestMissingChunks(playerPosition)\n}\n\nGame.prototype.addChunkToNextUpdate = function(chunk) {\n  this.chunksNeedsUpdate[chunk.position.join('|')] = chunk\n}\n\nGame.prototype.updateDirtyChunks = function() {\n  var self = this\n  Object.keys(this.chunksNeedsUpdate).forEach(function showChunkAtIndex(chunkIndex) {\n    var chunk = self.chunksNeedsUpdate[chunkIndex]\n    self.emit('dirtyChunkUpdate', chunk)\n    self.showChunk(chunk)\n  })\n  this.chunksNeedsUpdate = {}\n}\n\nGame.prototype.loadPendingChunks = function(count) {\n  var pendingChunks = this.pendingChunks\n\n  if (!this.asyncChunkGeneration) {\n    count = pendingChunks.length\n  } else {\n    count = count || (pendingChunks.length * 0.1)\n    count = Math.max(1, Math.min(count, pendingChunks.length))\n  }\n\n  for (var i = 0; i < count; i += 1) {\n    var chunkPos = pendingChunks[i].split('|')\n    var chunk = this.voxels.generateChunk(chunkPos[0]|0, chunkPos[1]|0, chunkPos[2]|0)\n\n    if (this.isClient) this.showChunk(chunk)\n  }\n\n  if (count) pendingChunks.splice(0, count)\n}\n\nGame.prototype.getChunkAtPosition = function(pos) {\n  var chunkID = this.voxels.chunkAtPosition(pos).join('|')\n  var chunk = this.voxels.chunks[chunkID]\n  return chunk\n}\n\nGame.prototype.showAllChunks = function() {\n  for (var chunkIndex in this.voxels.chunks) {\n    this.showChunk(this.voxels.chunks[chunkIndex])\n  }\n}\n\nGame.prototype.showChunk = function(chunk) {\n  var chunkIndex = chunk.position.join('|')\n  var bounds = this.voxels.getBounds.apply(this.voxels, chunk.position)\n  var scale = new THREE.Vector3(1, 1, 1)\n  var mesh = voxelMesh(chunk, this.mesher, scale, this.THREE)\n  this.voxels.chunks[chunkIndex] = chunk\n  if (this.voxels.meshes[chunkIndex]) {\n    if (this.voxels.meshes[chunkIndex].surfaceMesh) this.scene.remove(this.voxels.meshes[chunkIndex].surfaceMesh)\n    if (this.voxels.meshes[chunkIndex].wireMesh) this.scene.remove(this.voxels.meshes[chunkIndex].wireMesh)\n  }\n  this.voxels.meshes[chunkIndex] = mesh\n  if (this.isClient) {\n    if (this.meshType === 'wireMesh') mesh.createWireMesh()\n    else mesh.createSurfaceMesh(this.materials.material)\n    this.materials.paint(mesh)\n  }\n  mesh.setPosition(bounds[0][0], bounds[0][1], bounds[0][2])\n  mesh.addToScene(this.scene)\n  this.emit('renderChunk', chunk)\n  return mesh\n}\n\n// # Debugging methods\n\nGame.prototype.addMarker = function(position) {\n  var geometry = new THREE.SphereGeometry( 0.1, 10, 10 )\n  var material = new THREE.MeshPhongMaterial( { color: 0xffffff, shading: THREE.FlatShading } )\n  var mesh = new THREE.Mesh( geometry, material )\n  mesh.position.copy(position)\n  this.scene.add(mesh)\n}\n\nGame.prototype.addAABBMarker = function(aabb, color) {\n  var geometry = new THREE.CubeGeometry(aabb.width(), aabb.height(), aabb.depth())\n  var material = new THREE.MeshBasicMaterial({ color: color || 0xffffff, wireframe: true, transparent: true, opacity: 0.5, side: THREE.DoubleSide })\n  var mesh = new THREE.Mesh(geometry, material)\n  mesh.position.set(aabb.x0() + aabb.width() / 2, aabb.y0() + aabb.height() / 2, aabb.z0() + aabb.depth() / 2)\n  this.scene.add(mesh)\n  return mesh\n}\n\nGame.prototype.addVoxelMarker = function(x, y, z, color) {\n  var bbox = aabb([x, y, z], [1, 1, 1])\n  return this.addAABBMarker(bbox, color)\n}\n\nGame.prototype.pin = pin\n\n// # Misc internal methods\n\nGame.prototype.onControlChange = function(gained, stream) {\n  this.paused = false\n\n  if (!gained && !this.optout) {\n    this.buttons.disable()\n    return\n  }\n\n  this.buttons.enable()\n  stream.pipe(this.controls.createWriteRotationStream())\n}\n\nGame.prototype.onControlOptOut = function() {\n  this.optout = true\n}\n\nGame.prototype.onFire = function(state) {\n  this.emit('fire', this.controlling, state)\n}\n\nGame.prototype.setInterval = tic.interval.bind(tic)\nGame.prototype.setTimeout = tic.timeout.bind(tic)\n\nGame.prototype.tick = function(delta) {\n  for(var i = 0, len = this.items.length; i < len; ++i) {\n    this.items[i].tick(delta)\n  }\n  \n  if (this.materials) this.materials.tick(delta)\n\n  if (this.pendingChunks.length) this.loadPendingChunks()\n  if (Object.keys(this.chunksNeedsUpdate).length > 0) this.updateDirtyChunks()\n  \n  tic.tick(delta)\n\n  this.emit('tick', delta)\n  \n  if (!this.controls) return\n  var playerPos = this.playerPosition()\n  this.spatial.emit('position', playerPos, playerPos)\n}\n\nGame.prototype.render = function(delta) {\n  this.view.render(this.scene)\n}\n\nGame.prototype.initializeTimer = function(rate) {\n  var self = this\n  var accum = 0\n  var now = 0\n  var last = null\n  var dt = 0\n  var wholeTick\n  \n  self.frameUpdated = true\n  self.interval = setInterval(timer, 0)\n  return self.interval\n  \n  function timer() {\n    if (self.paused) {\n      last = Date.now()\n      accum = 0\n      return\n    }\n    now = Date.now()\n    dt = now - (last || now)\n    last = now\n    accum += dt\n    if (accum < rate) return\n    wholeTick = ((accum / rate)|0)\n    if (wholeTick <= 0) return\n    wholeTick *= rate\n    \n    self.tick(wholeTick)\n    accum -= wholeTick\n    \n    self.frameUpdated = true\n  }\n}\n\nGame.prototype.initializeRendering = function(opts) {\n  var self = this\n\n  if (!opts.statsDisabled) self.addStats()\n\n  window.addEventListener('resize', self.onWindowResize.bind(self), false)\n\n  requestAnimationFrame(window).on('data', function(dt) {\n    self.emit('prerender', dt)\n    self.render(dt)\n    self.emit('postrender', dt)\n  })\n  if (typeof stats !== 'undefined') {\n    self.on('postrender', function() {\n      stats.update()\n    })\n  }\n}\n\nGame.prototype.initializeControls = function(opts) {\n  // player control\n  this.keybindings = opts.keybindings || this.defaultButtons\n  this.buttons = kb(document.body, this.keybindings)\n  this.buttons.disable()\n  this.optout = false\n  this.interact = interact(opts.interactElement || this.view.element, opts.interactMouseDrag)\n  this.interact\n      .on('attain', this.onControlChange.bind(this, true))\n      .on('release', this.onControlChange.bind(this, false))\n      .on('opt-out', this.onControlOptOut.bind(this))\n  this.hookupControls(this.buttons, opts)\n}\n\nGame.prototype.hookupControls = function(buttons, opts) {\n  opts = opts || {}\n  opts.controls = opts.controls || {}\n  opts.controls.onfire = this.onFire.bind(this)\n  this.controls = control(buttons, opts.controls)\n  this.items.push(this.controls)\n  this.controlling = null\n}\n\nGame.prototype.handleChunkGeneration = function() {\n  var self = this\n  this.voxels.on('missingChunk', function(chunkPos) {\n    self.pendingChunks.push(chunkPos.join('|'))\n  })\n  this.voxels.requestMissingChunks(this.worldOrigin)\n  this.loadPendingChunks(this.pendingChunks.length)\n}\n\n// teardown methods\nGame.prototype.destroy = function() {\n  clearInterval(this.timer)\n}\n","/home/travis/build/npmtest/node-npmtest-voxel-engine/node_modules/voxel-engine/lib/stats.js":"/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Stats = function () {\n\n\tvar startTime = Date.now(), prevTime = startTime;\n\tvar ms = 0, msMin = Infinity, msMax = 0;\n\tvar fps = 0, fpsMin = Infinity, fpsMax = 0;\n\tvar frames = 0, mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.id = 'stats';\n\tcontainer.addEventListener( 'mousedown', function ( event ) { event.preventDefault(); setMode( ++ mode % 2 ) }, false );\n\tcontainer.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';\n\n\tvar fpsDiv = document.createElement( 'div' );\n\tfpsDiv.id = 'fps';\n\tfpsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#002';\n\tcontainer.appendChild( fpsDiv );\n\n\tvar fpsText = document.createElement( 'div' );\n\tfpsText.id = 'fpsText';\n\tfpsText.style.cssText = 'color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n\tfpsText.innerHTML = 'FPS';\n\tfpsDiv.appendChild( fpsText );\n\n\tvar fpsGraph = document.createElement( 'div' );\n\tfpsGraph.id = 'fpsGraph';\n\tfpsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0ff';\n\tfpsDiv.appendChild( fpsGraph );\n\n\twhile ( fpsGraph.children.length < 74 ) {\n\n\t\tvar bar = document.createElement( 'span' );\n\t\tbar.style.cssText = 'width:1px;height:30px;float:left;background-color:#113';\n\t\tfpsGraph.appendChild( bar );\n\n\t}\n\n\tvar msDiv = document.createElement( 'div' );\n\tmsDiv.id = 'ms';\n\tmsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#020;display:none';\n\tcontainer.appendChild( msDiv );\n\n\tvar msText = document.createElement( 'div' );\n\tmsText.id = 'msText';\n\tmsText.style.cssText = 'color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n\tmsText.innerHTML = 'MS';\n\tmsDiv.appendChild( msText );\n\n\tvar msGraph = document.createElement( 'div' );\n\tmsGraph.id = 'msGraph';\n\tmsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0f0';\n\tmsDiv.appendChild( msGraph );\n\n\twhile ( msGraph.children.length < 74 ) {\n\n\t\tvar bar = document.createElement( 'span' );\n\t\tbar.style.cssText = 'width:1px;height:30px;float:left;background-color:#131';\n\t\tmsGraph.appendChild( bar );\n\n\t}\n\n\tvar setMode = function ( value ) {\n\n\t\tmode = value;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase 0:\n\t\t\t\tfpsDiv.style.display = 'block';\n\t\t\t\tmsDiv.style.display = 'none';\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tfpsDiv.style.display = 'none';\n\t\t\t\tmsDiv.style.display = 'block';\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n\n\tvar updateGraph = function ( dom, value ) {\n\n\t\tvar child = dom.appendChild( dom.firstChild );\n\t\tchild.style.height = value + 'px';\n\n\t}\n\n\treturn {\n\n\t\tREVISION: 11,\n\n\t\tdomElement: container,\n\n\t\tsetMode: setMode,\n\n\t\tbegin: function () {\n\n\t\t\tstartTime = Date.now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tvar time = Date.now();\n\n\t\t\tms = time - startTime;\n\t\t\tmsMin = Math.min( msMin, ms );\n\t\t\tmsMax = Math.max( msMax, ms );\n\n\t\t\tmsText.textContent = ms + ' MS (' + msMin + '-' + msMax + ')';\n\t\t\tupdateGraph( msGraph, Math.min( 30, 30 - ( ms / 200 ) * 30 ) );\n\n\t\t\tframes ++;\n\n\t\t\tif ( time > prevTime + 1000 ) {\n\n\t\t\t\tfps = Math.round( ( frames * 1000 ) / ( time - prevTime ) );\n\t\t\t\tfpsMin = Math.min( fpsMin, fps );\n\t\t\t\tfpsMax = Math.max( fpsMax, fps );\n\n\t\t\t\tfpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';\n\t\t\t\tupdateGraph( fpsGraph, Math.min( 30, 30 - ( fps / 100 ) * 30 ) );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tstartTime = this.end();\n\n\t\t}\n\n\t}\n\n};\n\nmodule.exports = Stats","/home/travis/build/npmtest/node-npmtest-voxel-engine/node_modules/voxel-engine/lib/detector.js":"/**\n * @author alteredq / http://alteredqualia.com/\n * @author mr.doob / http://mrdoob.com/\n */\n\nmodule.exports = function() {\n  return {\n  \tcanvas : !! window.CanvasRenderingContext2D,\n  \twebgl : ( function () { try { return !! window.WebGLRenderingContext && !! document.createElement( 'canvas' ).getContext( 'experimental-webgl' ); } catch( e ) { return false; } } )(),\n  \tworkers : !! window.Worker,\n  \tfileapi : window.File && window.FileReader && window.FileList && window.Blob,\n\n  \tgetWebGLErrorMessage : function () {\n\n  \t\tvar domElement = document.createElement( 'div' );\n\n  \t\tdomElement.style.fontFamily = 'monospace';\n  \t\tdomElement.style.fontSize = '13px';\n  \t\tdomElement.style.textAlign = 'center';\n  \t\tdomElement.style.background = '#eee';\n  \t\tdomElement.style.color = '#000';\n  \t\tdomElement.style.padding = '1em';\n  \t\tdomElement.style.width = '475px';\n  \t\tdomElement.style.margin = '5em auto 0';\n\n  \t\tif ( ! this.webgl ) {\n\n  \t\t\tdomElement.innerHTML = window.WebGLRenderingContext ? [\n  \t\t\t\t'Your graphics card does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\">WebGL</a>.<br />',\n  \t\t\t\t'Find out how to get it <a href=\"http://get.webgl.org/\">here</a>.'\n  \t\t\t].join( '\\n' ) : [\n  \t\t\t\t'Your browser does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\">WebGL</a>.<br/>',\n  \t\t\t\t'Find out how to get it <a href=\"http://get.webgl.org/\">here</a>.'\n  \t\t\t].join( '\\n' );\n\n  \t\t}\n\n  \t\treturn domElement;\n\n  \t},\n\n  \taddGetWebGLMessage : function ( parameters ) {\n\n  \t\tvar parent, id, domElement;\n\n  \t\tparameters = parameters || {};\n\n  \t\tparent = parameters.parent !== undefined ? parameters.parent : document.body;\n  \t\tid = parameters.id !== undefined ? parameters.id : 'oldie';\n\n  \t\tdomElement = Detector.getWebGLErrorMessage();\n  \t\tdomElement.id = id;\n\n  \t\tparent.appendChild( domElement );\n\n  \t}\n\n  };\n}\n"}